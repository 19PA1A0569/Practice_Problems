/*
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.
Example 2:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [2,1], p = 2, q = 1
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the BST.

*/

Approach
This is a Binary Search Tree then Left side elements has less values than root element
And Values of Right side elements of root is greater than the root
If both p and q less than root then these are occured at left side. and then we recurse it through the root left values.
if both are greater than root then these are occured at right side.Then we recurse it through thr root right values.
if one of the p and q are small and one is high then we return root.


code:
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null){
            return null;
        }
        if(root<p && root<q){
            return lowestCommonAncestor(root.right,p,q);
        }
        if(root>p && root<q){
            return lowestCommonAncestor(root.left,p,q);
        }
        return root;
    }
}
