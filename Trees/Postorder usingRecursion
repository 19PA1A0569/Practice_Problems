Input: root = [1,null,2,3]
Output: [3,2,1]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of the nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

[Recursive]:
Approach: In postorder traversal, the tree is traversed in this way: left, right, root.

The algorithm approach can be stated as:

We first recursively visit the left child and go on left till we find a node pointing to NULL.
Then we return to its parent.
Then we recursively visit the right child.
After we have returned from the right child as well, only then will we print the  current node value.


code:

class Solution {
    ArrayList<Integer> list=new ArrayList<>();
    public List<Integer> postorderTraversal(TreeNode root) {
        if(root==null)
            return list;
        postorderTraversal(root.left);
        postorderTraversal(root.right);
        list.add(root.val);
        return list;
        
    }
}
