/*
Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
*/

Approach: 

First we have to make a queue of pair which have nodes and their respective +ve and -ve indexes.
Then we need a map data structure to store the lines and the nodes. This map will store the data in the form of sorted orders of keys(Lines).
Here we will follow the level order traversal.
Traverse through the nodes starting with root,0 and store them to the queue.
Until the queue is not empty, store the node  and line no. in 2 separate variable .
Then check if that line is present in the map or not
If not present then store the line and the node->val to the map
Otherwise store the node->left and node->right along with there line nos. to the queue.
Then print the node->val from the map



code:
class Solution
{
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root)
    {
        class Pair{
            Node node;
            int hd;
            Pair(Node node,int hd){
                this.node=node;
                this.hd=hd;
            }
        }
        // add your code
        ArrayList<Integer>res=new ArrayList<>();
        if(root==null){
            return res;
        }
        Map<Integer,Integer>map=new TreeMap<>();
        Queue<Pair>queue=new LinkedList<>();
        queue.add(new Pair(root,0));
        while(!queue.isEmpty()){
            Pair it=queue.remove();
            int hd=it.hd;
            Node temp=it.node;
            if(map.get(hd)==null){
                map.put(hd,temp.data);
            }
            if(temp.left!=null){
                queue.add(new Pair(temp.left,hd-1));
            }
            if(temp.right!=null){
                queue.add(new Pair(temp.right,hd+1));
            }
        }
        for(Map.Entry<Integer,Integer>entry:map.entrySet()){
            res.add(entry.getValue());
        }
        return res;
    }
}
